---
- name: Create security group
  amazon.aws.ec2_group:
    name: "{{ security_group_name }}"
    description: "{{ security_group_name }}"
    profile: "{{ profie | default(omit) }}"
    rules: "{{ security_group_rules }}"
    rules_egress: "{{ security_group_rules_egress }}"
  register: security_group

- name: Test for presence of local keypair
  ansible.builtin.stat:
    path: "{{ keypair_path }}"
  register: keypair_local

- name: Delete remote keypair
  amazon.aws.ec2_key:
    name: "{{ keypair_name }}"
    profile: "{{ profie | default(omit) }}"
    state: absent
  when: not keypair_local.stat.exists

- name: Create keypair
  amazon.aws.ec2_key:
    name: "{{ keypair_name }}"
    profile: "{{ profie | default(omit) }}"
  register: keypair

- name: Persist the keypair
  ansible.builtin.copy:
    dest: "{{ keypair_path }}"
    content: "{{ keypair.key.private_key }}"
    mode: 0600
  when: keypair.msg == "key pair created"

- name: Get the ec2 ami(s) by owner and name, if image not set
  amazon.aws.ec2_ami_info:
    owners: "{{ image_owner }}"
    filters:
      name: "{{ image_name }}"
    profile: "{{ profie | default(omit) }}"
  register: ami_info
  when:
    - image_owner is defined
    - image_name is defined

- name: Set AMI id
  ansible.builtin.set_fact:
    image: "{{ ami_info.images[-1].image_id }}"
  when:
    - image_owner is defined
    - image_name is defined

- name: Create molecule instance(s)
  amazon.aws.ec2_instance:
    count: 1
    image:
      id: "{{ image }}"
    instance_type: "{{ instance_type }}"
    key_name: "{{ keypair_name }}"
    name: "{{ tag_name }}"
    network:
      assign_public_ip: true
    profile: "{{ profie | default(omit) }}"
    security_group: "{{ security_group_name }}"
    tags:
      created_by: "{{ tag_created_by }}"
      instance: "{{ tag_name }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          delete_on_termination: yes
          volume_size: "{{ volume_size }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    wait: yes
  register: server
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index
  async: 7200
  poll: 0

- name: Wait for instance(s) creation to complete
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ server.results }}"

- name: Wait until Ansible could retrive EC2 instance informations
  ansible.builtin.pause:
    minutes: 1

- name: Retrieve running EC2 instance information
  amazon.aws.ec2_instance_info:
    filters:
      "tag:Name": "{{ tag_name }}"
  register: ec2_info

- name: Populate instance config dict
  ansible.builtin.set_fact:
    instance_conf_dict: {
      'instance': "{{ item.tags.instance }}",
      'address': "{{ item.public_ip_address }}",
      'keypair_name': "{{ keypair_name }}",
      'user': "{{ ssh_user }}",
      'port': "{{ ssh_port }}",
      'identity_file': "{{ keypair_path }}",
      'instance_ids': "{{ item.instance_id }}",
      'group_id': "{{ security_group.group_id }}", }
  with_items: '{{ ec2_info.instances }}'
  register: instance_config_dict
  when: server.changed | bool

- name: Convert instance config dict to a list
  ansible.builtin.set_fact:
    instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
  when: server.changed | bool

- name: Dump instance config
  ansible.builtin.copy:
    content: "{{ instance_conf | to_json | from_json | community.molecule.to_yaml }}"
    dest: "{{ molecule_instance_config }}"
  when: server.changed | bool

- name: Wait for SSH
  ansible.builtin.wait_for:
    port: "{{ ssh_port }}"
    host: "{{ item.address }}"
    search_regex: SSH
    delay: 10
    timeout: 320
  with_items: "{{ lookup('file', molecule_instance_config) | community.molecule.from_yaml }}"

- name: Wait for boot process to finish
  ansible.builtin.pause:
    minutes: 1
